// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
public class SuiteTests : IDisposable {
  public IWebDriver driver {get; private set;}
  public IDictionary<String, Object> vars {get; private set;}
  public IJavaScriptExecutor js {get; private set;}
  public SuiteTests()
  {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<String, Object>();
  }
  public void Dispose()
  {
    driver.Quit();
  }
  public string waitForWindow(int timeout) {
    try {
      Thread.Sleep(timeout);
    } catch(Exception e) {
      Console.WriteLine("{0} Exception caught.", e);
    }
    var whNow = ((IReadOnlyCollection<object>)driver.WindowHandles).ToList();
    var whThen = ((IReadOnlyCollection<object>)vars["WindowHandles"]).ToList();
    if (whNow.Count > whThen.Count) {
      return whNow.Except(whThen).First().ToString();
    } else {
      return whNow.First().ToString();
    }
  }
  [Fact]
  public void Links() {
    // Test name: Links
    // Step # | name | target | value
    // 1 | open | https://demoqa.com/elements | 
    driver.Navigate().GoToUrl("https://demoqa.com/elements");
    // 2 | setWindowSize | 784x824 | 
    driver.Manage().Window.Size = new System.Drawing.Size(784, 824);
    // 3 | click | css=.show #item-5 > .text | 
    driver.FindElement(By.CssSelector(".show #item-5 > .text")).Click();
    // 4 | click | id=simpleLink | 
    vars["WindowHandles"] = driver.WindowHandles;
    // 5 | storeWindowHandle | root | 
    driver.FindElement(By.Id("simpleLink")).Click();
    // 6 | selectWindow | handle=${win3183} | 
    vars["win3183"] = waitForWindow(2000);
    // 7 | assertTitle | ToolsQA | 
    vars["root"] = driver.CurrentWindowHandle;
    // 8 | selectWindow | handle=${root} | 
    driver.SwitchTo().Window(vars["win3183"].ToString());
    // 9 | click | id=dynamicLink | 
    Assert.Equal(driver.Title, "ToolsQA");
    // 10 | selectWindow | handle=${win4396} | 
    driver.SwitchTo().Window(vars["root"].ToString());
    // 11 | assertTitle | ToolsQA | 
    vars["WindowHandles"] = driver.WindowHandles;
    // 12 | selectWindow | handle=${root} | 
    driver.FindElement(By.Id("dynamicLink")).Click();
    // 13 | click | id=created | 
    vars["win4396"] = waitForWindow(2000);
    // 14 | assertText | id=linkResponse | Link has responded with staus 201 and status text Created
    driver.SwitchTo().Window(vars["win4396"].ToString());
    // 15 | click | id=no-content | 
    Assert.Equal(driver.Title, "ToolsQA");
    // 16 | assertText | id=linkResponse | Link has responded with staus 204 and status text No Content
    driver.SwitchTo().Window(vars["root"].ToString());
    // 17 | click | id=moved | 
    driver.FindElement(By.Id("created")).Click();
    // 18 | assertText | id=linkResponse | Link has responded with staus 301 and status text Moved Permanently
    Assert.Equal(driver.FindElement(By.Id("linkResponse")).Text, "Link has responded with staus 201 and status text Created");
    // 19 | click | id=bad-request | 
    driver.FindElement(By.Id("no-content")).Click();
    // 20 | assertText | id=linkResponse | Link has responded with staus 400 and status text Bad Request
    Assert.Equal(driver.FindElement(By.Id("linkResponse")).Text, "Link has responded with staus 204 and status text No Content");
    // 21 | click | id=unauthorized | 
    driver.FindElement(By.Id("moved")).Click();
    // 22 | assertText | id=linkResponse | Link has responded with staus 401 and status text Unauthorized
    Assert.Equal(driver.FindElement(By.Id("linkResponse")).Text, "Link has responded with staus 301 and status text Moved Permanently");
    // 23 | click | id=forbidden | 
    driver.FindElement(By.Id("bad-request")).Click();
    // 24 | assertText | id=linkResponse | Link has responded with staus 403 and status text Forbidden
    Assert.Equal(driver.FindElement(By.Id("linkResponse")).Text, "Link has responded with staus 400 and status text Bad Request");
    // 25 | click | id=invalid-url | 
    driver.FindElement(By.Id("unauthorized")).Click();
    // 26 | assertText | id=linkResponse | Link has responded with staus 404 and status text Not Found
    Assert.Equal(driver.FindElement(By.Id("linkResponse")).Text, "Link has responded with staus 401 and status text Unauthorized");
    driver.FindElement(By.Id("forbidden")).Click();
    Assert.Equal(driver.FindElement(By.Id("linkResponse")).Text, "Link has responded with staus 403 and status text Forbidden");
    driver.FindElement(By.Id("invalid-url")).Click();
    Assert.Equal(driver.FindElement(By.Id("linkResponse")).Text, "Link has responded with staus 404 and status text Not Found");
  }
}

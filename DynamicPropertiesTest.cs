// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
public class SuiteTests : IDisposable {
  public IWebDriver driver {get; private set;}
  public IDictionary<String, Object> vars {get; private set;}
  public IJavaScriptExecutor js {get; private set;}
  public SuiteTests()
  {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<String, Object>();
  }
  public void Dispose()
  {
    driver.Quit();
  }
  [Fact]
  public void DynamicProperties() {
    // Test name: Dynamic Properties
    // Step # | name | target | value
    // 1 | open | https://demoqa.com/elements | 
    driver.Navigate().GoToUrl("https://demoqa.com/elements");
    // 2 | setWindowSize | 1053x807 | 
    driver.Manage().Window.Size = new System.Drawing.Size(1053, 807);
    // 3 | click | css=.show #item-8 > .text | 
    driver.FindElement(By.CssSelector(".show #item-8 > .text")).Click();
    // 4 | executeScript | return window.getComputedStyle(document.getElementById("colorChange")).getPropertyValue("color"); | colorPrevioSegundos
    vars["colorPrevioSegundos"] = js.ExecuteScript("return window.getComputedStyle(document.getElementById(\"colorChange\")).getPropertyValue(\"color\");");
    // 5 | assert | colorPrevioSegundos | rgb(255, 255, 255)
    Assert.Equal(vars["colorPrevioSegundos"].ToString(), "rgb(255, 255, 255)");
    // 6 | pause | 5000 | 
    try {
      Thread.Sleep(5000);
    } catch (Exception e) {
      Console.WriteLine("{0} Exception caught.", e);
    }
    // 7 | executeScript | return window.getComputedStyle(document.getElementById("colorChange")).getPropertyValue("color"); | colorDespuesSegundos
    vars["colorDespuesSegundos"] = js.ExecuteScript("return window.getComputedStyle(document.getElementById(\"colorChange\")).getPropertyValue(\"color\");");
    // 8 | assert | colorDespuesSegundos | rgb(220, 53, 69)
    Assert.Equal(vars["colorDespuesSegundos"].ToString(), "rgb(220, 53, 69)");
  }
}
